[user]
	name = Tobias Lindholm
	email = tobias.lindholm@antob.se
	signingkey = tobias.lindholm@antob.se

[core]
	editor = vim
	whitespace = fix,trailing-space,cr-at-eol
	hooksPath = ~/.config/git/hooks
	excludesfile = ~/.ignore
	commitGraph = true

[credential]
	helper = cache

[color]
	advice = true
	branch = true
	diff = true
	grep = true
	interactive = true
	pager = true
	push = true
	remote = true
	showBranch = true
	status = true
	transport = true
	ui = true

[color "branch"]
	current = 14
	local = 10
	remote = 9
	upstream = 208
	plain = 15

[color "decorate"]
	branch = 2 bold
	remoteBranch = 1 bold
	tag = 3 bold
	stash = 5 bold
	HEAD = 6 bold
	grafted = 4 bold

[color "diff"]
	context = 15
	meta = 4 bold reverse
	frag = 3 bold reverse
	func = 166 bold reverse
	commit = 3 bold
	old = 9
	new = 10
	oldMoved = 8
	newMoved = 14
	oldMovedAlternative = 8
	newMovedAlternative = 14
	whitespace = 1 reverse

[color "diff-highlight"]
	oldHighlight = reverse
	oldReset = noreverse

[color "interactive"]
	prompt = 4 bold
	header = 15 bold
	help = 15
	error = 1

[color "push"]
	error = 1 bold

[color "transport"]
	rejected = 1 bold

[color "remote"]
	hint = 5 bold
	warning = 3 bold
	success = 2 bold
	error = 1 bold

[color "status"]
	header = 15 bold
	added = 14 bold
	changed = 11 bold
	untracked = 9 bold
	branch = 2 bold
	nobranch = 3 bold
	localBranch = 2 bold
	remoteBranch = 1 bold
	unmerged = 9 bold reverse

[commit]
	gpgSign = true
	status = true

[diff]
	algorithm = histogram
	tool = vimdiff
	colorMoved = default
	renames = copy
	mnemonicPrefix = true
	wsErrorHighlight = all
	statGraphWidth = 40

[diff "bin"]
	textconv = hexdump -v -C

[difftool]
	prompt = true

[difftool "vimdiff"]
	cmd = vimdiff "$LOCAL" "$REMOTE"

[merge]
	ff = false
	conflictStyle = merge
	tool = vimmerge

[mergetool]
	prompt = true
	keepBackup = false
	writeToTemp = true

[mergetool "vimmerge"]
	cmd = vimmerge "$MERGED" "$BASE" "$LOCAL" "$REMOTE"
	trustExitCode = true

[mergetool "vim-diffconflicts"]
	cmd = vim -f -c DiffConflictsWithHistory "$MERGED" "$BASE" "$LOCAL" "$REMOTE"
	trustExitCode = true

[mergetool "fugitive"]
	cmd = vim -f -c Gvdiff "$MERGED"

[rebase]
	missingCommitsCheck = warn
	abbreviateCommands = false
	autoSquash = true
	stat = true

[fetch]
	prune = false

[pull]
	rebase = interactive

[push]
	default = simple
	gpgSign = if-asked
	followTags = true

[submodule]
	fetchJobs = 0

[grep]
	lineNumber = true
	patternType = perl

[interactive]
	singlekey = true
	diffFilter = "/usr/share/git/diff-highlight/diff-highlight | less"

[branch]
	autoSetupMerge = true
	autoSetupRebase = always

[status]
	short = true
	branch = true
	showStash = true
	submoduleSummary = true

[log]
	abbrevCommit = true
	decorate = short
	date = format:%a, %Y-%m-%d %R (%z)
	follow = true
	graphColors = 1,2,3,4,5,6,8,166,9,10,11,12,13,14,15,208
	showRoot = true
	mailmap = true

[pager]
	log = "/usr/share/git/diff-highlight/diff-highlight | less"
	show = "/usr/share/git/diff-highlight/diff-highlight | less"
	diff = "/usr/share/git/diff-highlight/diff-highlight | less"
	# diff = "/usr/share/git/diff-highlight/diff-highlight | less --pattern='^diff.*'"

[rerere]
	enabled = true

[protocol]
	version = 2

[column]
	ui = auto,column

[web]
	browser = chromium

[advice]
	pushUpdateRejected = false
	statusHints = false
	statusUoption = false
	commitBeforeMerge = false
	resolveConflict = false
	implicitIdentity = false
	detachedHead = false
	amWorkDir = true
	rmHints = true
	addEmbeddedRepo = false
	ignoredHook = true
	waitingForEditor = false

[url "git@github.com:"]
	insteadOf = @gh:

[url "git@gitlab.com:"]
	insteadOf = @gl:

[url "git@bitbucket.org:"]
	insteadOf = @bb:

[url "aur@aur.archlinux.org"]
	insteadOf = @aur:

[url "https://github.com/"]
	insteadOf = gh://

[url "https://gitlab.com/"]
	insteadOf = gl://

[url "https://bitbucket.org/"]
	insteadOf = bb://

[url "https://aur.archlinux.org/"]
	insteadOf = aur://

[format]
	pretty = lf

[pretty]
	lo = tformat:%C(auto)%h%C(reset)%C(auto)%d%C(reset) %s %C(italic blue)%ad%C(reset) %C(241)%aN%C(reset)
	lc =  format:%C(auto)%h%C(reset) %C(white)-%C(reset) %C(italic blue)%ad%C(reset) %C(italic cyan)(%ar)%C(reset)%C(auto)%d%C(reset)%n %C(white)⤷%C(reset) %s %C(241)- %aN <%aE>%C(reset)%n
	lf =  format:%C(auto)%h%C(reset)%C(auto)%d%C(reset)%n%C(white)Parent:%C(reset)   %C(italic)%p%C(reset)%n%C(white)Author:%C(reset)   %aN %C(241)<%aE>%C(reset)%n          %C(italic blue)%ad%C(reset) %C(italic cyan)(%ar)%C(reset)%n%C(white)Commit:%C(reset)   %cN %C(241)<%cE>%C(reset)   %C(239)[GPG: %G?% GK]%C(reset)%n          %C(italic blue)%cd%C(reset) %C(italic cyan)(%cr)%C(reset)%w(0,4,4)%n%+C(bold)%s%C(reset)%n%+b%n
	rlo = tformat:%C(auto)%h%C(reset) %C(bold yellow)(%C(red)%gd%C(bold yellow))%C(reset)%C(auto)%d%C(reset) %gs %C(italic blue)%ad%C(reset) %C(241)%aN%C(reset)
	rlc =  format:%C(auto)%h%C(reset) %C(white)-%C(reset) %C(italic blue)%ad%C(reset) %C(italic cyan)(%ar)%C(reset)%C(auto)%d%C(reset)%n %C(white)⤷%C(reset) %s %C(241)- %aN <%aE>%C(reset)%n %C(white)⤷%C(reset) %C(bold yellow)(%C(red)%gd%C(bold yellow))%C(reset) %gs %C(241)- %gN <%gE>%C(reset)%n
	rlf =  format:%C(auto)%h%C(reset) %C(bold yellow)(%C(red)%gd%C(bold yellow))%C(reset)%C(auto)%d%C(reset)%n%C(white)Parent:%C(reset)   %C(italic)%p%C(reset)%n%C(white)Author:%C(reset)   %aN %C(241)<%aE>%C(reset)%n          %C(italic blue)%ad%C(reset) %C(italic cyan)(%ar)%C(reset)%n%C(white)Commit:%C(reset)   %cN %C(241)<%cE>%C(reset)   %C(239)[GPG: %G?]%C(reset)%n          %C(italic blue)%cd%C(reset) %C(italic cyan)(%cr)%C(reset)%n%C(white)Reflog:%C(reset)   %gN %C(241)<%gE>%C(reset)%n          %C(italic)%gs%C(reset)%w(0,4,4)%n%+C(bold)%s%C(reset)%n%+b%n

[alias]
        hist = log --graph --pretty=format:'%Cred%h %cd%Creset |%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=short
        code-changes = "!git log --format=format: --name-only | egrep -v '^$' | sort | uniq -c | sort -rg | head -10"
	
	# log, current branch
	l  = log --pretty=lc --graph --color
	lo = log --pretty=lo --graph --color --date=human
	ls = log --pretty=lo --graph --color --date=human --simplify-by-decoration
	lf = log --pretty=lf --graph --color
	ld = log --pretty=lf --graph --color --cc --stat
	lp = log --pretty=lf --graph --color --cc --patch

	# log, all branches+tags on all remotes
	#    added: --all
	la  = log --pretty=lc --graph --color --all
	lao = log --pretty=lo --graph --color --date=human --all
	las = log --pretty=lo --graph --color --date=human --simplify-by-decoration --all
	laf = log --pretty=lf --graph --color --all
	lad = log --pretty=lf --graph --color --cc --stat --all
	lap = log --pretty=lf --graph --color --cc --patch --all

	# log, all branches+tags on remotes 'origin' and 'upstream'
	#    added: --branches='*' --tags='*' --remotes=origin --remotes=upstream
	lg  = log --pretty=lc --graph --color --branches='*' --tags='*' --remotes=origin --remotes=upstream
	lgo = log --pretty=lo --graph --color --date=human --branches='*' --tags='*' --remotes=origin --remotes=upstream
	lgs = log --pretty=lo --graph --color --date=human --simplify-by-decoration --branches='*' --tags='*' --remotes=origin --remotes=upstream
	lgf = log --pretty=lf --graph --color --branches='*' --tags='*' --remotes=origin --remotes=upstream
	lgd = log --pretty=lf --graph --color --cc --stat --branches='*' --tags='*' --remotes=origin --remotes=upstream
	lgp = log --pretty=lf --graph --color --cc --patch --branches='*' --tags='*' --remotes=origin --remotes=upstream

	rl  = reflog --pretty=rlc --color
	rlo = reflog --pretty=rlo --color
	rlf = reflog --pretty=rlf --color
	sl  = stash list --pretty=rlc --color
	slo = stash list --pretty=rlo --color
	slf = stash list --pretty=rlf --color --stat
	sls = stash show --color --patch

	sh = show --stat --cc --summary --patch
	grep = grep -Ii

	d = diff -c
	ds = diff --find-renames --stat --cc -c
	dc = diff --cached -c
	dl = diff --cached -c HEAD~
	du = diff --cached -c @{u}
	dr = "!f() { git diff -c \"${1:-HEAD}\"~..\"${1:-HEAD}\"; }; f"

	s = status
	si = status --ignored
	sa = status --ignored --untracked-files

	a = add
	aa = add --all
	au = add --update
	ai = add --interactive
	ap = add --patch
	an = add --intent-to-add
	u = reset HEAD --
	up = reset --patch HEAD --

	c = commit --verbose
	cc = commit --verbose -c
	cf = commit --verbose --fixup
	cs = commit --verbose --squash
	ca = commit --verbose --amend
	can = commit --verbose --amend --no-edit
	car = commit --verbose --amend --all

	co = checkout
	com = checkout master --
	cod = checkout develop --
	cob = checkout -b

	b = branch
	ba = branch --all -vv
	bc = branch --contains
	bd = branch --delete --force

	t = tag
	tc = tag --contains
	td = tag --delete

	cl = clone
	p = pull
	f = fetch --tags
	ff = fetch --force --tags
	fa = fetch --all --tags
	fp = fetch --prune --tags
	ffp = fetch --prune --force --tags
	fap = fetch --prune --all --tags
	pfa = "!f() { git remote | xargs -I@ -P0 git fetch --tags \"$@\" @; }; f"

	pu = push
	puf = push --force-with-lease
	puff = push --force
	puu = "!f() { [ \"$#\" -ge 1 ] && REMOTE=$1 && shift; git push -u \"${REMOTE:-origin}\" \"$(git rev-parse --short --abbrev-ref HEAD)\" \"$@\"; }; f"

	sub = submodule
	subu = submodule update --init --recursive

	m = merge
	ma = merge --abort
	mc = merge --continue
	mff = merge --ff-only
	mnc = "!f() { git merge --no-commit --no-ff \"$@\"; EC=$?; git merge --abort; exit $EC; }; f"

	r = rebase
	ra = rebase --abort
	rc = rebase --continue
	rq = rebase --quit
	rs = rebase --skip
	ret = rebase --edit-todo
	rsh = rebase --show-current-patch

	ri = rebase --interactive
	riu = rebase --interactive @{u}
	rim = rebase --interactive master
	rid = rebase --interactive develop

	cp = cherry-pick
	cpa = cherry-pick --abort
	cpc = cherry-pick --continue
	cpq = cherry-pick --quit

	rv = revert
	rva = revert --abort
	rvc = revert --continue
	rvq = revert --quit

	re = reset
	res = reset --soft
	reh = reset --hard

	mt = mergetool
	dt = difftool

	which = branch --all --contains
	which-tag = describe --always --contains
	who = shortlog --summary --numbered --no-merges
	whoami = "!echo \"$(git config --get user.name) <$(git config --get user.email)>\""
	watch = "!f() { watch -ctn 2 git \"${@:-l}\"; }; f"

	# list branches sorted by last modified
	bls = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's@refs/heads/@@'"

	# initialize repository in current directory
	this = "!git init && git commit --message='Initialize' --allow-empty"

	# regex checkout
	#    git rco <regex> [<options>]
	rco = "!f() { [ \"$#\" -gt 1 ] && REGEX=$1 && shift; git checkout \"$@\" \"$(git branch --all | cut -c 3- | sed 's|^remotes/.*/||' | grep -m 1 -iEe \"$REGEX\" )\"; }; f"

	# open Github repository in browser
	#    git open [<remote>]
	open = "!f() { URL=$(git config remote.\"${1:-origin}\".url); xdg-open \"${URL%%.git}\"; }; f"

	# fetch and checkout a Github pull request
	#    git pr [[<remote>] <number>]
	pr = "!f() { git config remote.upstream.url > /dev/null 2>&1 && REMOTE=upstream || REMOTE=origin; [ \"$#\" -gt 1 ] && REMOTE=$1 && shift; git fetch \"${REMOTE:-origin}\" \"pull/$1/head\" && git checkout FETCH_HEAD; }; f"

	# hard reset with commit before (use reflog to recover)
	#    git wipe [<commit>]
	wipe = "!f() { git add --all && git commit --quiet --message='WIPE-SAVEPOINT' && git reset \"${1:-HEAD~}\" --hard && git clean -fd; }; f"

	# hard reset and clean (unrecoverable)
	nuke = !"git reset --hard HEAD && git clean -fd"

	# set up remotes for fork
	#    git fork [<old-remote> [<new-remote>]]
	fork = "!f() { URL=$(git config remote.\"${1:-origin}\".url); git remote set-url \"${1:-origin}\" \"$(echo \"$URL\" | perl -pe 's/(?<=[:\\/])[^:\\/]+(?=\\/[^\\/]+$)/alfunx/')\"; git remote add \"${2:-upstream}\" \"$URL\"; }; f"

	# generate tags file
	ctags = "!$HOME/.config/git/hooks/ctags"

	# create/extend gitignore file
	gitignore = gitignore

	# fzf commands
	fbr = fzf-branch
	fco = fzf-checkout
	fcoc = "!f() { git fzf-print-sha | xargs git checkout; }; f"
	fsha = fzf-print-sha
	fshow = fzf-show-commit
	fstash = fzf-show-stash

[svn]
	rmdir = true

[include]
	path = .gitconfig.local

[includeIf "gitdir:~/projects/"]
	path = ~/projects/.gitconfig

[includeIf "gitdir:~/development/"]
	path = ~/development/.gitconfig
